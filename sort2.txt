4.插入排序
-----------------------------------------------------------
C++
-----------------------------------------------------------
#include <iostream>
using namespace std;

void insertionSort(int arr[], int n) {
    for (int i = 1; i < n; ++i) {
        int key = arr[i];
        int j = i - 1;
        
        // 将大于 key 的元素逐个移到右边
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            --j;
        }
        arr[j + 1] = key;
    }
}

int main() {
    int arr[] = {12, 11, 13, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    
    insertionSort(arr, n);
    
    cout << "Sorted array: ";
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
    
    return 0;
}

-----------------------------------------------------------------
C#
-----------------------------------------------------------------
using System;

class Program {
    static void InsertionSort(int[] arr) {
        for (int i = 1; i < arr.Length; i++) {
            int key = arr[i];
            int j = i - 1;
            
            // 将大于 key 的元素逐个移到右边
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    static void Main() {
        int[] arr = { 12, 11, 13, 5, 6 };
        InsertionSort(arr);
        
        Console.WriteLine("Sorted array: ");
        foreach (var num in arr) {
            Console.Write(num + " ");
        }
    }
}

-----------------------------------------------------------
Java 
------------------------------------------------------------
public class InsertionSort {
    public static void insertionSort(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            int key = arr[i];
            int j = i - 1;
            
            // 将大于 key 的元素逐个移到右边
            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }

    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6};
        insertionSort(arr);
        
        System.out.println("Sorted array: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}

--------------------------------------------------------------
JavaScript 
--------------------------------------------------------------
function insertionSort(arr) {
    for (let i = 1; i < arr.length; i++) {
        let key = arr[i];
        let j = i - 1;
        
        // 将大于 key 的元素逐个移到右边
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

const arr = [12, 11, 13, 5, 6];
insertionSort(arr);
console.log("Sorted array:", arr);

-------------------------------------------------------------
PHP 
--------------------------------------------------------------
<?php
function insertionSort(&$arr) {
    $n = count($arr);
    for ($i = 1; $i < $n; $i++) {
        $key = $arr[$i];
        $j = $i - 1;
        
        // 将大于 key 的元素逐个移到右边
        while ($j >= 0 && $arr[$j] > $key) {
            $arr[$j + 1] = $arr[$j];
            $j--;
        }
        $arr[$j + 1] = $key;
    }
}

$arr = [12, 11, 13, 5, 6];
insertionSort($arr);
echo "Sorted array: " . implode(" ", $arr);
?>

-------------------------------------------------------------------
Python 
-------------------------------------------------------------------
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        
        # 将大于 key 的元素逐个移到右边
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

arr = [12, 11, 13, 5, 6]
insertion_sort(arr)
print("Sorted array:", arr)

----------------------------------------------------------------------
5.合併排序
----------------------------------------------------------------------
c++
----------------------------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> leftArr(n1), rightArr(n2);

    for (int i = 0; i < n1; i++)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        rightArr[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};
    int n = arr.size();
    mergeSort(arr, 0, n - 1);

    for (int num : arr)
        cout << num << " ";
    return 0;
}

---------------------------------------------------------------------
C#
-----------------------------------------------------------------------
using System;

class MergeSort {
    public static void Merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;
        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        Array.Copy(arr, left, leftArr, 0, n1);
        Array.Copy(arr, mid + 1, rightArr, 0, n2);

        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    public static void MergeSortMethod(int[] arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            MergeSortMethod(arr, left, mid);
            MergeSortMethod(arr, mid + 1, right);
            Merge(arr, left, mid, right);
        }
    }

    static void Main(string[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};
        int n = arr.Length;
        MergeSortMethod(arr, 0, n - 1);

        foreach (int num in arr) {
            Console.Write(num + " ");
        }
    }
}

-----------------------------------------------------------------------------
Java 
-----------------------------------------------------------------------------
import java.util.Arrays;

public class MergeSort {

    public static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] leftArr = new int[n1];
        int[] rightArr = new int[n2];

        System.arraycopy(arr, left, leftArr, 0, n1);
        System.arraycopy(arr, mid + 1, rightArr, 0, n2);

        int i = 0, j = 0, k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            } else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }

    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

    public static void main(String[] args) {
        int[] arr = {12, 11, 13, 5, 6, 7};
        mergeSort(arr, 0, arr.length - 1);

        System.out.println(Arrays.toString(arr));
    }
}

----------------------------------------------------------------------
JavaScript 
-----------------------------------------------------------------------
function merge(arr, left, mid, right) {
    let n1 = mid - left + 1;
    let n2 = right - mid;
    let leftArr = arr.slice(left, mid + 1);
    let rightArr = arr.slice(mid + 1, right + 1);

    let i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
    }
}

function mergeSort(arr, left, right) {
    if (left < right) {
        let mid = Math.floor((left + right) / 2);
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

let arr = [12, 11, 13, 5, 6, 7];
mergeSort(arr, 0, arr.length - 1);
console.log(arr);

----------------------------------------------------------
PHP 
-----------------------------------------------------------
<?php

function merge(&$arr, $left, $mid, $right) {
    $n1 = $mid - $left + 1;
    $n2 = $right - $mid;
    
    $leftArr = array_slice($arr, $left, $n1);
    $rightArr = array_slice($arr, $mid + 1, $n2);
    
    $i = $j = $k = $left;
    
    while ($i < $n1 && $j < $n2) {
        if ($leftArr[$i] <= $rightArr[$j]) {
            $arr[$k] = $leftArr[$i];
            $i++;
        } else {
            $arr[$k] = $rightArr[$j];
            $j++;
        }
        $k++;
    }

    while ($i < $n1) {
        $arr[$k] = $leftArr[$i];
        $i++;
        $k++;
    }

    while ($j < $n2) {
        $arr[$k] = $rightArr[$j];
        $j++;
        $k++;
    }
}

function mergeSort(&$arr, $left, $right) {
    if ($left < $right) {
        $mid = floor(($left + $right) / 2);
        mergeSort($arr, $left, $mid);
        mergeSort($arr, $mid + 1, $right);
        merge($arr, $left, $mid, $right);
    }
}

$arr = [12, 11, 13, 5, 6, 7];
mergeSort($arr, 0, count($arr) - 1);
print_r($arr);

?>

----------------------------------------------------------
Python 
-----------------------------------------------------------
def merge(arr, left, mid, right):
    n1 = mid - left + 1
    n2 = right - mid
    leftArr = arr[left:mid + 1]
    rightArr = arr[mid + 1:right + 1]

    i = j = k = left
    while i < n1 and j < n2:
        if leftArr[i] <= rightArr[j]:
            arr[k] = leftArr[i]
            i += 1
        else:
            arr[k] = rightArr[j]
            j += 1
        k += 1

    while i < n1:
        arr[k] = leftArr[i]
        i += 1
        k += 1

    while j < n2:
        arr[k] = rightArr[j]
        j += 1
        k += 1

def mergeSort(arr, left, right):
    if left < right:
        mid = (left + right) // 2
        mergeSort(arr, left, mid)
        mergeSort(arr, mid + 1, right)
        merge(arr, left, mid, right)

arr = [12, 11, 13, 5, 6, 7]
mergeSort(arr, 0, len(arr) - 1)
print(arr)

----------------------------------------------------------
6.計速排序法
----------------------------------------------------------
C++
-----------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>

void countingSort(std::vector<int>& arr) {
    if (arr.empty()) return;

    int maxElem = *std::max_element(arr.begin(), arr.end());
    int minElem = *std::min_element(arr.begin(), arr.end());

    std::vector<int> count(maxElem - minElem + 1, 0);
    for (int num : arr) {
        count[num - minElem]++;
    }

    int index = 0;
    for (int i = 0; i < count.size(); ++i) {
        while (count[i] > 0) {
            arr[index++] = i + minElem;
            count[i]--;
        }
    }
}

int main() {
    std::vector<int> arr = {4, 2, 2, 8, 3, 3, 1};
    countingSort(arr);
    for (int num : arr) {
        std::cout << num << " ";
    }
    return 0;
}

---------------------------------------------------------------
C#
----------------------------------------------------------------
using System;
using System.Linq;

class Program {
    static void CountingSort(int[] arr) {
        if (arr.Length == 0) return;

        int maxElem = arr.Max();
        int minElem = arr.Min();

        int[] count = new int[maxElem - minElem + 1];
        foreach (var num in arr) {
            count[num - minElem]++;
        }

        int index = 0;
        for (int i = 0; i < count.Length; i++) {
            while (count[i] > 0) {
                arr[index++] = i + minElem;
                count[i]--;
            }
        }
    }

    static void Main() {
        int[] arr = {4, 2, 2, 8, 3, 3, 1};
        CountingSort(arr);
        Console.WriteLine(string.Join(" ", arr));
    }
}

--------------------------------------------------------------
Java
---------------------------------------------------------------
import java.util.Arrays;

public class CountingSort {
    public static void countingSort(int[] arr) {
        if (arr.length == 0) return;

        int maxElem = Arrays.stream(arr).max().getAsInt();
        int minElem = Arrays.stream(arr).min().getAsInt();

        int[] count = new int[maxElem - minElem + 1];
        for (int num : arr) {
            count[num - minElem]++;
        }

        int index = 0;
        for (int i = 0; i < count.length; i++) {
            while (count[i] > 0) {
                arr[index++] = i + minElem;
                count[i]--;
            }
        }
    }

    public static void main(String[] args) {
        int[] arr = {4, 2, 2, 8, 3, 3, 1};
        countingSort(arr);
        System.out.println(Arrays.toString(arr));
    }
}

------------------------------------------------------------
JavaScript
------------------------------------------------------------
function countingSort(arr) {
    if (arr.length === 0) return;

    const maxElem = Math.max(...arr);
    const minElem = Math.min(...arr);

    const count = new Array(maxElem - minElem + 1).fill(0);
    for (let num of arr) {
        count[num - minElem]++;
    }

    let index = 0;
    for (let i = 0; i < count.length; i++) {
        while (count[i] > 0) {
            arr[index++] = i + minElem;
            count[i]--;
        }
    }
}

const arr = [4, 2, 2, 8, 3, 3, 1];
countingSort(arr);
console.log(arr);

--------------------------------------------------------------
PHP
--------------------------------------------------------------
function countingSort(&$arr) {
    if (count($arr) == 0) return;

    $maxElem = max($arr);
    $minElem = min($arr);

    $count = array_fill(0, $maxElem - $minElem + 1, 0);
    foreach ($arr as $num) {
        $count[$num - $minElem]++;
    }

    $index = 0;
    for ($i = 0; $i < count($count); $i++) {
        while ($count[$i] > 0) {
            $arr[$index++] = $i + $minElem;
            $count[$i]--;
        }
    }
}

$arr = [4, 2, 2, 8, 3, 3, 1];
countingSort($arr);
print_r($arr);

-------------------------------------------------------------------
Python
-------------------------------------------------------------------
def counting_sort(arr):
    if not arr:
        return

    max_elem = max(arr)
    min_elem = min(arr)

    count = [0] * (max_elem - min_elem + 1)
    for num in arr:
        count[num - min_elem] += 1

    index = 0
    for i in range(len(count)):
        while count[i] > 0:
            arr[index] = i + min_elem
            index += 1
            count[i] -= 1

arr = [4, 2, 2, 8, 3, 3, 1]
counting_sort(arr)
print(arr)

