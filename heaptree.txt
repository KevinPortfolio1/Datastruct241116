 C++
 ----------
 #include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class MaxHeap {
public:
    MaxHeap() {}

    void insert(int val) {
        heap.push_back(val);
        siftUp(heap.size() - 1);
    }

    int extractMax() {
        if (heap.size() == 0) return -1;
        int maxVal = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        siftDown(0);
        return maxVal;
    }

private:
    vector<int> heap;

    void siftUp(int index) {
        while (index > 0) {
            int parent = (index - 1) / 2;
            if (heap[parent] >= heap[index]) break;
            swap(heap[parent], heap[index]);
            index = parent;
        }
    }

    void siftDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;

        if (leftChild < heap.size() && heap[leftChild] > heap[largest]) largest = leftChild;
        if (rightChild < heap.size() && heap[rightChild] > heap[largest]) largest = rightChild;

        if (largest != index) {
            swap(heap[largest], heap[index]);
            siftDown(largest);
        }
    }
};

int main() {
    MaxHeap maxHeap;
    maxHeap.insert(10);
    maxHeap.insert(20);
    maxHeap.insert(5);

    cout << "Extracted Max: " << maxHeap.extractMax() << endl;
    cout << "Extracted Max: " << maxHeap.extractMax() << endl;

    return 0;
}

c#
---------------
using System;
using System.Collections.Generic;

public class MaxHeap
{
    private List<int> heap = new List<int>();

    public void Insert(int val)
    {
        heap.Add(val);
        SiftUp(heap.Count - 1);
    }

    public int ExtractMax()
    {
        if (heap.Count == 0) return -1;
        int maxVal = heap[0];
        heap[0] = heap[heap.Count - 1];
        heap.RemoveAt(heap.Count - 1);
        SiftDown(0);
        return maxVal;
    }

    private void SiftUp(int index)
    {
        while (index > 0)
        {
            int parent = (index - 1) / 2;
            if (heap[parent] >= heap[index]) break;
            Swap(parent, index);
            index = parent;
        }
    }

    private void SiftDown(int index)
    {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;

        if (leftChild < heap.Count && heap[leftChild] > heap[largest]) largest = leftChild;
        if (rightChild < heap.Count && heap[rightChild] > heap[largest]) largest = rightChild;

        if (largest != index)
        {
            Swap(largest, index);
            SiftDown(largest);
        }
    }

    private void Swap(int i, int j)
    {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }
}

class Program
{
    static void Main()
    {
        MaxHeap maxHeap = new MaxHeap();
        maxHeap.Insert(10);
        maxHeap.Insert(20);
        maxHeap.Insert(5);

        Console.WriteLine("Extracted Max: " + maxHeap.ExtractMax());
        Console.WriteLine("Extracted Max: " + maxHeap.ExtractMax());
    }
}


java
-----------------
import java.util.ArrayList;

public class MaxHeap {
    private ArrayList<Integer> heap = new ArrayList<>();

    public void insert(int val) {
        heap.add(val);
        siftUp(heap.size() - 1);
    }

    public int extractMax() {
        if (heap.size() == 0) return -1;
        int maxVal = heap.get(0);
        heap.set(0, heap.get(heap.size() - 1));
        heap.remove(heap.size() - 1);
        siftDown(0);
        return maxVal;
    }

    private void siftUp(int index) {
        while (index > 0) {
            int parent = (index - 1) / 2;
            if (heap.get(parent) >= heap.get(index)) break;
            swap(parent, index);
            index = parent;
        }
    }

    private void siftDown(int index) {
        int leftChild = 2 * index + 1;
        int rightChild = 2 * index + 2;
        int largest = index;

        if (leftChild < heap.size() && heap.get(leftChild) > heap.get(largest)) largest = leftChild;
        if (rightChild < heap.size() && heap.get(rightChild) > heap.get(largest)) largest = rightChild;

        if (largest != index) {
            swap(largest, index);
            siftDown(largest);
        }
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }

    public static void main(String[] args) {
        MaxHeap maxHeap = new MaxHeap();
        maxHeap.insert(10);
        maxHeap.insert(20);
        maxHeap.insert(5);

        System.out.println("Extracted Max: " + maxHeap.extractMax());
        System.out.println("Extracted Max: " + maxHeap.extractMax());
    }
}


javascript
-------------
class MaxHeap {
    constructor() {
        this.heap = [];
    }

    insert(val) {
        this.heap.push(val);
        this.siftUp(this.heap.length - 1);
    }

    extractMax() {
        if (this.heap.length === 0) return -1;
        let maxVal = this.heap[0];
        this.heap[0] = this.heap.pop();
        this.siftDown(0);
        return maxVal;
    }

    siftUp(index) {
        while (index > 0) {
            let parent = Math.floor((index - 1) / 2);
            if (this.heap[parent] >= this.heap[index]) break;
            [this.heap[parent], this.heap[index]] = [this.heap[index], this.heap[parent]];
            index = parent;
        }
    }

    siftDown(index) {
        let leftChild = 2 * index + 1;
        let rightChild = 2 * index + 2;
        let largest = index;

        if (leftChild < this.heap.length && this.heap[leftChild] > this.heap[largest]) largest = leftChild;
        if (rightChild < this.heap.length && this.heap[rightChild] > this.heap[largest]) largest = rightChild;

        if (largest !== index) {
            [this.heap[largest], this.heap[index]] = [this.heap[index], this.heap[largest]];
            this.siftDown(largest);
        }
    }
}

let maxHeap = new MaxHeap();
maxHeap.insert(10);
maxHeap.insert(20);
maxHeap.insert(5);

console.log("Extracted Max: " + maxHeap.extractMax());
console.log("Extracted Max: " + maxHeap.extractMax());


python
-------
class MaxHeap:
    def __init__(self):
        self.heap = []

    def insert(self, val):
        self.heap.append(val)
        self.sift_up(len(self.heap) - 1)

    def extract_max(self):
        if not self.heap:
            return -1
        max_val = self.heap[0]
        self.heap[0] = self.heap.pop()
        self.sift_down(0)
        return max_val

    def sift_up(self, index):
        while index > 0:
            parent = (index - 1) // 2
            if self.heap[parent] >= self.heap[index]:
                break
            self.heap[parent], self.heap[index] = self.heap[index], self.heap[parent]
            index = parent

    def sift_down(self, index):
        left_child = 2 * index + 1
        right_child = 2 * index + 2
        largest = index

        if left_child < len(self.heap) and self.heap[left_child] > self.heap[largest]:
            largest = left_child
        if right_child < len(self.heap) and self.heap[right_child] > self.heap[largest]:
            largest = right_child

        if largest != index:
            self.heap[largest], self.heap[index] = self.heap[index], self.heap[largest]
            self.sift_down(largest)

# Usage
max_heap = MaxHeap()
max_heap.insert(10)
max_heap.insert(20)
max_heap.insert(5)

print("Extracted Max:", max_heap.extract_max())
print("Extracted Max:", max_heap.extract_max())


php
-----------
<?php
class MaxHeap {
    private $heap = [];

    public function insert($val) {
        $this->heap[] = $val;
        $this->siftUp(count($this->heap) - 1);
    }

    public function extractMax() {
        if (count($this->heap) === 0) return -1;
        $maxVal = $this->heap[0];
        $this->heap[0] = array_pop($this->heap);
        $this->siftDown(0);
        return $maxVal;
    }

    private function siftUp($index) {
        while ($index > 0) {
            $parent = intdiv($index - 1, 2);
            if ($this->heap[$parent] >= $this->heap[$index]) break;
            list($this->heap[$parent], $this->heap[$index]) = [$this->heap[$index], $this->heap[$parent]];
            $index = $parent;
        }
    }

    private function siftDown($index) {
        $leftChild = 2 * $index + 1;
        $rightChild = 2 * $index + 2;
        $largest = $index;

        if ($leftChild < count($this->heap) && $this->heap[$leftChild] > $this->heap[$largest]) {
            $largest = $leftChild;
        }
        if ($rightChild < count($this->heap) && $this->heap[$rightChild] > $this->heap[$largest]) {
            $largest = $rightChild;
        }

        if ($largest != $index) {
            list($this->heap[$largest], $this->heap[$index]) = [$this->heap[$index], $this->heap[$largest]];
            $this->siftDown($largest);
        }
    }
}

// Usage
$maxHeap = new MaxHeap();
$maxHeap->insert(10);
$maxHeap->insert(20);
$maxHeap->insert(5);

echo "Extracted Max: " . $maxHeap->extractMax() . "\n";
echo "Extracted Max: " . $maxHeap->extractMax() . "\n";
?>
