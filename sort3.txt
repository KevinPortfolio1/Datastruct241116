7.桶排序（Bucket Sort）

#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>

using namespace std;

// 桶排序函数
void bucketSort(vector<float>& arr) {
    if (arr.empty()) return;

    // 找到最大值和最小值
    float max_val = *max_element(arr.begin(), arr.end());
    float min_val = *min_element(arr.begin(), arr.end());

    // 计算桶的个数
    int bucket_count = arr.size();
    vector<vector<float>> buckets(bucket_count);

    // 将数据分配到桶中
    for (float num : arr) {
        int bucket_index = (num - min_val) / (max_val - min_val) * (bucket_count - 1);
        buckets[bucket_index].push_back(num);
    }

    // 对每个桶内部进行排序
    for (auto& bucket : buckets) {
        sort(bucket.begin(), bucket.end());
    }

    // 将桶中的元素合并
    arr.clear();
    for (auto& bucket : buckets) {
        copy(bucket.begin(), bucket.end(), back_inserter(arr));
    }
}

int main() {
    vector<float> arr = {0.42, 0.32, 0.58, 0.74, 0.25, 0.12};
    bucketSort(arr);

    cout << "Sorted array: ";
    for (float num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}


---------------------------------------------------------------------
8.基數排序（Radix Sort）
----------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// 获取数字中最大值的位数
int getMax(const vector<int>& arr) {
    return *max_element(arr.begin(), arr.end());
}

// 基数排序辅助函数：计数排序
void countSort(vector<int>& arr, int exp) {
    vector<int> output(arr.size());
    vector<int> count(10, 0);

    // 计算每个数字的位上的频率
    for (int i = 0; i < arr.size(); i++) {
        count[(arr[i] / exp) % 10]++;
    }

    // 累加计数数组
    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    // 生成排序后的数组
    for (int i = arr.size() - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    // 将输出数组复制回原数组
    copy(output.begin(), output.end(), arr.begin());
}

// 基数排序主函数
void radixSort(vector<int>& arr) {
    int max_val = getMax(arr);

    // 从最低位开始，逐位排序
    for (int exp = 1; max_val / exp > 0; exp *= 10) {
        countSort(arr, exp);
    }
}

int main() {
    vector<int> arr = {170, 45, 75, 90, 802, 24, 2, 66};
    radixSort(arr);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

----------------------------------------------------------------
9.堆排序（Heap Sort）
----------------------------------------------------------------
#include <iostream>
#include <vector>

using namespace std;

// 堆排序辅助函数：维护堆的性质
void heapify(vector<int>& arr, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

// 堆排序主函数
void heapSort(vector<int>& arr) {
    int n = arr.size();

    // 构建最大堆
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // 逐步交换堆顶元素并维护堆
    for (int i = n - 1; i >= 1; i--) {
        swap(arr[0], arr[i]);
        heapify(arr, i, 0);
    }
}

int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};
    heapSort(arr);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

---------------------------------------------------------
10.Shell 排序（Shell Sort）
----------------------------------------------------------
#include <iostream>
#include <vector>

using namespace std;

// Shell排序主函数
void shellSort(vector<int>& arr) {
    int n = arr.size();
    
    // 选择步长序列（通常使用n/2, n/4, ..., 1）
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j = i;
            // 插入排序：将arr[i]插入到前面适当的位置
            while (j >= gap && arr[j - gap] > temp) {
                arr[j] = arr[j - gap];
                j -= gap;
            }
            arr[j] = temp;
        }
    }
}

int main() {
    vector<int> arr = {12, 34, 54, 2, 3};
    shellSort(arr);

    cout << "Sorted array: ";
    for (int num : arr) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
